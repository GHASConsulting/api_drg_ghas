/**
 * Testes para o Sistema de Controle de M√≥dulos DRG
 * Valida funcionalidades de controle, monitoramento e otimiza√ß√£o
 */

import { ModuleControl } from "../utils/moduleControl";
import { ModuleOptimizer } from "../utils/moduleOptimizer";

export class ModuleControlTestSuite {
  private originalEnv: NodeJS.ProcessEnv;

  constructor() {
    this.originalEnv = { ...process.env };
  }

  /**
   * Configura ambiente de teste
   */
  private setupTestEnvironment(config: Record<string, string>): void {
    Object.assign(process.env, config);
  }

  /**
   * Restaura ambiente original
   */
  private restoreEnvironment(): void {
    process.env = this.originalEnv;
  }

  /**
   * Teste 1: Controle b√°sico de m√≥dulos
   */
  async testBasicModuleControl(): Promise<boolean> {
    console.log("üß™ Teste 1: Controle B√°sico de M√≥dulos");

    try {
      // Configurar ambiente b√°sico
      this.setupTestEnvironment({
        SEND_BASIC_MODULES: "S",
        SEND_OPTIONAL_MODULES: "N",
        SEND_SPECIAL_MODULES: "N",
        SEND_CTI: "N",
        SEND_SUPORTE_VENTILATORIO: "N",
        SEND_CATETER_VASCULAR: "N",
        SEND_SONDA_VESICAL: "N",
        SEND_CONDICAO_ADQUIRIDA: "N",
        SEND_PARTO_ADEQUADO: "N",
        SEND_RN: "N",
        SEND_ALTA_ADMINISTRATIVA: "N",
        SEND_ANALISE_CRITICA: "N",
        SEND_CAUSA_EXTERNA_PERMANENCIA: "N",
        SEND_MEDICO_PROCEDIMENTO: "N",
        SEND_DISPOSITIVO_TERAPEUTICO: "N",
        MODULE_MONITORING: "S",
        LOG_SENT_MODULES: "S",
        VALIDATE_REQUIRED_MODULES: "S",
      });

      // Testar categorias
      const basicActive = ModuleControl.shouldSendBasicModules();
      const optionalActive = ModuleControl.shouldSendOptionalModules();
      const specialActive = ModuleControl.shouldSendSpecialModules();

      if (!basicActive || optionalActive || specialActive) {
        throw new Error("Categorias b√°sicas n√£o funcionando corretamente");
      }

      // Testar m√≥dulos individuais
      const ctiActive = ModuleControl.shouldSendModule("CTI");
      const rnActive = ModuleControl.shouldSendModule("RN");

      if (ctiActive || rnActive) {
        throw new Error("M√≥dulos individuais n√£o respeitando configura√ß√£o");
      }

      // Testar lista de m√≥dulos ativos
      const activeModules = ModuleControl.getActiveModules();
      if (activeModules.length > 0) {
        throw new Error("Lista de m√≥dulos ativos deveria estar vazia");
      }

      console.log("‚úÖ Controle b√°sico funcionando");
      return true;
    } catch (error) {
      console.error("‚ùå Erro no controle b√°sico:", error);
      return false;
    } finally {
      this.restoreEnvironment();
    }
  }

  /**
   * Teste 2: Controle granular de m√≥dulos
   */
  async testGranularModuleControl(): Promise<boolean> {
    console.log("üß™ Teste 2: Controle Granular de M√≥dulos");

    try {
      // Configurar ambiente granular
      this.setupTestEnvironment({
        SEND_BASIC_MODULES: "S",
        SEND_OPTIONAL_MODULES: "N",
        SEND_SPECIAL_MODULES: "N",
        SEND_CTI: "S",
        SEND_SUPORTE_VENTILATORIO: "S",
        SEND_CATETER_VASCULAR: "N",
        SEND_SONDA_VESICAL: "N",
        SEND_CONDICAO_ADQUIRIDA: "N",
        SEND_PARTO_ADEQUADO: "S",
        SEND_RN: "S",
        SEND_ALTA_ADMINISTRATIVA: "S",
        SEND_ANALISE_CRITICA: "N",
        SEND_CAUSA_EXTERNA_PERMANENCIA: "N",
        SEND_MEDICO_PROCEDIMENTO: "N",
        SEND_DISPOSITIVO_TERAPEUTICO: "N",
        MODULE_MONITORING: "S",
        LOG_SENT_MODULES: "S",
        VALIDATE_REQUIRED_MODULES: "S",
      });

      // Testar m√≥dulos espec√≠ficos
      const ctiActive = ModuleControl.shouldSendModule("CTI");
      const suporteActive = ModuleControl.shouldSendModule(
        "SUPORTE_VENTILATORIO"
      );
      const cateterActive = ModuleControl.shouldSendModule("CATETER_VASCULAR");
      const partoActive = ModuleControl.shouldSendModule("PARTO_ADEQUADO");
      const rnActive = ModuleControl.shouldSendModule("RN");

      if (
        !ctiActive ||
        !suporteActive ||
        cateterActive ||
        !partoActive ||
        !rnActive
      ) {
        throw new Error("Controle granular n√£o funcionando corretamente");
      }

      // Testar lista de m√≥dulos ativos
      const activeModules = ModuleControl.getActiveModules();
      const expectedModules = [
        "CTI",
        "SUPORTE_VENTILATORIO",
        "PARTO_ADEQUADO",
        "RN",
        "ALTA_ADMINISTRATIVA",
      ];

      if (activeModules.length !== expectedModules.length) {
        throw new Error(
          `Esperado ${expectedModules.length} m√≥dulos, encontrado ${activeModules.length}`
        );
      }

      for (const module of expectedModules) {
        if (!activeModules.includes(module)) {
          throw new Error(`M√≥dulo ${module} deveria estar ativo`);
        }
      }

      console.log("‚úÖ Controle granular funcionando");
      return true;
    } catch (error) {
      console.error("‚ùå Erro no controle granular:", error);
      return false;
    } finally {
      this.restoreEnvironment();
    }
  }

  /**
   * Teste 3: Valida√ß√£o de m√≥dulos obrigat√≥rios
   */
  async testRequiredModulesValidation(): Promise<boolean> {
    console.log("üß™ Teste 3: Valida√ß√£o de M√≥dulos Obrigat√≥rios");

    try {
      // Teste com m√≥dulos obrigat√≥rios presentes
      this.setupTestEnvironment({
        VALIDATE_REQUIRED_MODULES: "S",
        SEND_ATENDIMENTO: "S",
        SEND_HOSPITAL: "S",
        SEND_PACIENTE: "S",
        SEND_MEDICO: "S",
        SEND_OPERADORA: "S",
      });

      const validationPassed = ModuleControl.validateRequiredModules();
      if (!validationPassed) {
        throw new Error("Valida√ß√£o deveria passar com m√≥dulos obrigat√≥rios");
      }

      // Teste com m√≥dulos obrigat√≥rios faltando
      this.setupTestEnvironment({
        VALIDATE_REQUIRED_MODULES: "S",
        SEND_ATENDIMENTO: "S",
        SEND_HOSPITAL: "S",
        SEND_PACIENTE: "N", // Faltando
        SEND_MEDICO: "S",
        SEND_OPERADORA: "S",
      });

      const validationFailed = ModuleControl.validateRequiredModules();
      if (validationFailed) {
        throw new Error(
          "Valida√ß√£o deveria falhar com m√≥dulos obrigat√≥rios faltando"
        );
      }

      console.log("‚úÖ Valida√ß√£o de m√≥dulos obrigat√≥rios funcionando");
      return true;
    } catch (error) {
      console.error("‚ùå Erro na valida√ß√£o:", error);
      return false;
    } finally {
      this.restoreEnvironment();
    }
  }

  /**
   * Teste 4: Monitoramento de m√≥dulos
   */
  async testModuleMonitoring(): Promise<boolean> {
    console.log("üß™ Teste 4: Monitoramento de M√≥dulos");

    try {
      // Configurar ambiente com monitoramento
      this.setupTestEnvironment({
        MODULE_MONITORING: "S",
        SEND_CTI: "S",
        SEND_SUPORTE_VENTILATORIO: "S",
        SEND_CATETER_VASCULAR: "N",
        SEND_SONDA_VESICAL: "N",
      });

      // Simular processamento de m√≥dulos
      ModuleControl.startModuleMonitoring("CTI");
      await new Promise((resolve) => setTimeout(resolve, 50)); // Simular processamento
      ModuleControl.endModuleMonitoring("CTI");

      ModuleControl.startModuleMonitoring("SUPORTE_VENTILATORIO");
      await new Promise((resolve) => setTimeout(resolve, 30));
      ModuleControl.endModuleMonitoring("SUPORTE_VENTILATORIO");

      // Simular m√≥dulos pulados
      ModuleControl.recordModuleSkipped("CATETER_VASCULAR");
      ModuleControl.recordModuleSkipped("SONDA_VESICAL");

      // Verificar m√©tricas
      const ctiMetrics = ModuleControl.getModuleMetrics("CTI");
      const cateterMetrics = ModuleControl.getModuleMetrics("CATETER_VASCULAR");

      if (!ctiMetrics || ctiMetrics.timesProcessed !== 1) {
        throw new Error("M√©tricas do CTI n√£o est√£o corretas");
      }

      if (!cateterMetrics || cateterMetrics.timesSkipped !== 1) {
        throw new Error("M√©tricas do Cateter n√£o est√£o corretas");
      }

      // Verificar m√©tricas do sistema
      const systemMetrics = ModuleControl.getSystemMetrics();
      if (systemMetrics.totalModules < 2) {
        throw new Error("M√©tricas do sistema n√£o est√£o sendo coletadas");
      }

      console.log("‚úÖ Monitoramento funcionando");
      return true;
    } catch (error) {
      console.error("‚ùå Erro no monitoramento:", error);
      return false;
    } finally {
      this.restoreEnvironment();
      ModuleControl.resetMetrics();
    }
  }

  /**
   * Teste 5: An√°lise de otimiza√ß√£o
   */
  async testOptimizationAnalysis(): Promise<boolean> {
    console.log("üß™ Teste 5: An√°lise de Otimiza√ß√£o");

    try {
      // Configurar ambiente com dados de teste
      this.setupTestEnvironment({
        MODULE_MONITORING: "S",
        SEND_CTI: "S",
        SEND_SUPORTE_VENTILATORIO: "S",
        SEND_CATETER_VASCULAR: "N",
        SEND_SONDA_VESICAL: "N",
      });

      // Simular uso para gerar m√©tricas
      for (let i = 0; i < 10; i++) {
        ModuleControl.startModuleMonitoring("CTI");
        await new Promise((resolve) => setTimeout(resolve, 10));
        ModuleControl.endModuleMonitoring("CTI");

        ModuleControl.startModuleMonitoring("SUPORTE_VENTILATORIO");
        await new Promise((resolve) => setTimeout(resolve, 10));
        ModuleControl.endModuleMonitoring("SUPORTE_VENTILATORIO");

        ModuleControl.recordModuleSkipped("CATETER_VASCULAR");
        ModuleControl.recordModuleSkipped("SONDA_VESICAL");
      }

      // Gerar an√°lise de otimiza√ß√£o
      const optimizationReport = ModuleOptimizer.analyzeAndOptimize();

      if (optimizationReport.totalSuggestions === 0) {
        throw new Error("An√°lise de otimiza√ß√£o deveria gerar sugest√µes");
      }

      // Verificar se h√° sugest√µes para m√≥dulos nunca usados
      const neverUsedSuggestions = optimizationReport.suggestions.filter(
        (s) => s.type === "always_inactive"
      );

      if (neverUsedSuggestions.length === 0) {
        throw new Error("Deveria haver sugest√µes para m√≥dulos nunca usados");
      }

      // Gerar relat√≥rio de otimiza√ß√£o
      const report = ModuleOptimizer.generateOptimizationReport();
      if (!report.includes("RELAT√ìRIO DE OTIMIZA√á√ÉO")) {
        throw new Error(
          "Relat√≥rio de otimiza√ß√£o n√£o est√° sendo gerado corretamente"
        );
      }

      console.log("‚úÖ An√°lise de otimiza√ß√£o funcionando");
      return true;
    } catch (error) {
      console.error("‚ùå Erro na an√°lise de otimiza√ß√£o:", error);
      return false;
    } finally {
      this.restoreEnvironment();
      ModuleControl.resetMetrics();
    }
  }

  /**
   * Teste 6: Simula√ß√£o de configura√ß√£o
   */
  async testConfigurationSimulation(): Promise<boolean> {
    console.log("üß™ Teste 6: Simula√ß√£o de Configura√ß√£o");

    try {
      // Simular configura√ß√£o de UTI
      const utiConfig = {
        SEND_BASIC_MODULES: "S",
        SEND_OPTIONAL_MODULES: "S",
        SEND_SPECIAL_MODULES: "N",
        SEND_CTI: "S",
        SEND_SUPORTE_VENTILATORIO: "S",
        SEND_CATETER_VASCULAR: "S",
        SEND_SONDA_VESICAL: "S",
        SEND_CONDICAO_ADQUIRIDA: "S",
        SEND_PARTO_ADEQUADO: "N",
        SEND_RN: "N",
        SEND_ALTA_ADMINISTRATIVA: "S",
        SEND_ANALISE_CRITICA: "S",
        SEND_CAUSA_EXTERNA_PERMANENCIA: "S",
        SEND_MEDICO_PROCEDIMENTO: "S",
        SEND_DISPOSITIVO_TERAPEUTICO: "S",
      };

      const impact = ModuleOptimizer.simulateConfigurationImpact(utiConfig);

      if (impact.activeModules.length < 5) {
        throw new Error("Configura√ß√£o de UTI deveria ativar mais m√≥dulos");
      }

      if (impact.efficiency < 50) {
        throw new Error("Efici√™ncia deveria ser calculada corretamente");
      }

      // Simular configura√ß√£o de Maternidade
      const maternidadeConfig = {
        SEND_BASIC_MODULES: "S",
        SEND_OPTIONAL_MODULES: "N",
        SEND_SPECIAL_MODULES: "S",
        SEND_CTI: "N",
        SEND_SUPORTE_VENTILATORIO: "N",
        SEND_CATETER_VASCULAR: "N",
        SEND_SONDA_VESICAL: "N",
        SEND_CONDICAO_ADQUIRIDA: "N",
        SEND_PARTO_ADEQUADO: "S",
        SEND_RN: "S",
        SEND_ALTA_ADMINISTRATIVA: "S",
        SEND_ANALISE_CRITICA: "S",
        SEND_CAUSA_EXTERNA_PERMANENCIA: "N",
        SEND_MEDICO_PROCEDIMENTO: "N",
        SEND_DISPOSITIVO_TERAPEUTICO: "N",
      };

      const maternidadeImpact =
        ModuleOptimizer.simulateConfigurationImpact(maternidadeConfig);

      if (!maternidadeImpact.activeModules.includes("PARTO_ADEQUADO")) {
        throw new Error("Maternidade deveria ativar PARTO_ADEQUADO");
      }

      if (!maternidadeImpact.activeModules.includes("RN")) {
        throw new Error("Maternidade deveria ativar RN");
      }

      console.log("‚úÖ Simula√ß√£o de configura√ß√£o funcionando");
      return true;
    } catch (error) {
      console.error("‚ùå Erro na simula√ß√£o:", error);
      return false;
    } finally {
      this.restoreEnvironment();
    }
  }

  /**
   * Teste 7: Exporta√ß√£o de m√©tricas
   */
  async testMetricsExport(): Promise<boolean> {
    console.log("üß™ Teste 7: Exporta√ß√£o de M√©tricas");

    try {
      // Configurar ambiente e gerar dados
      this.setupTestEnvironment({
        MODULE_MONITORING: "S",
        SEND_CTI: "S",
        SEND_SUPORTE_VENTILATORIO: "N",
      });

      // Simular processamento
      ModuleControl.startModuleMonitoring("CTI");
      await new Promise((resolve) => setTimeout(resolve, 10));
      ModuleControl.endModuleMonitoring("CTI");
      ModuleControl.recordModuleSkipped("SUPORTE_VENTILATORIO");

      // Exportar m√©tricas
      const metricsJson = ModuleControl.exportMetrics();
      const metrics = JSON.parse(metricsJson);

      if (!metrics.timestamp || !metrics.system || !metrics.modules) {
        throw new Error("Exporta√ß√£o de m√©tricas n√£o est√° no formato correto");
      }

      if (metrics.modules.length === 0) {
        throw new Error("M√©tricas de m√≥dulos n√£o est√£o sendo exportadas");
      }

      // Verificar se h√° dados de CTI
      const ctiData = metrics.modules.find((m: any) => m.moduleName === "CTI");
      if (!ctiData || ctiData.timesProcessed !== 1) {
        throw new Error("Dados do CTI n√£o est√£o corretos na exporta√ß√£o");
      }

      console.log("‚úÖ Exporta√ß√£o de m√©tricas funcionando");
      return true;
    } catch (error) {
      console.error("‚ùå Erro na exporta√ß√£o:", error);
      return false;
    } finally {
      this.restoreEnvironment();
      ModuleControl.resetMetrics();
    }
  }

  /**
   * Executa todos os testes
   */
  async runAllTests(): Promise<{
    passed: number;
    failed: number;
    results: any[];
  }> {
    console.log("üöÄ Iniciando Testes de Controle de M√≥dulos DRG");
    console.log("=".repeat(50));

    const tests = [
      { name: "Controle B√°sico", test: () => this.testBasicModuleControl() },
      {
        name: "Controle Granular",
        test: () => this.testGranularModuleControl(),
      },
      {
        name: "Valida√ß√£o de M√≥dulos",
        test: () => this.testRequiredModulesValidation(),
      },
      { name: "Monitoramento", test: () => this.testModuleMonitoring() },
      {
        name: "An√°lise de Otimiza√ß√£o",
        test: () => this.testOptimizationAnalysis(),
      },
      {
        name: "Simula√ß√£o de Configura√ß√£o",
        test: () => this.testConfigurationSimulation(),
      },
      { name: "Exporta√ß√£o de M√©tricas", test: () => this.testMetricsExport() },
    ];

    const results: any[] = [];
    let passed = 0;
    let failed = 0;

    for (const test of tests) {
      try {
        const startTime = Date.now();
        const result = await test.test();
        const duration = Date.now() - startTime;

        if (result) {
          passed++;
          console.log(`‚úÖ ${test.name}: PASSOU (${duration}ms)`);
        } else {
          failed++;
          console.log(`‚ùå ${test.name}: FALHOU (${duration}ms)`);
        }

        results.push({
          name: test.name,
          passed: result,
          duration,
          timestamp: new Date().toISOString(),
        });
      } catch (error) {
        failed++;
        console.log(`‚ùå ${test.name}: ERRO - ${error}`);
        results.push({
          name: test.name,
          passed: false,
          error: error instanceof Error ? error.message : String(error),
          timestamp: new Date().toISOString(),
        });
      }
    }

    console.log("=".repeat(50));
    console.log(`üìä RESUMO: ${passed} passaram, ${failed} falharam`);
    console.log(
      `üéØ Taxa de sucesso: ${Math.round((passed / tests.length) * 100)}%`
    );

    return { passed, failed, results };
  }
}
