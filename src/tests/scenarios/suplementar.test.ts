import { TestDataGenerator, TestData } from "../testDataGenerator";
import { TestRunner } from "../testRunner";

export class SuplementarTestScenarios {
  private dataGenerator: TestDataGenerator;
  private testRunner: TestRunner;

  constructor(dataGenerator: TestDataGenerator, testRunner: TestRunner) {
    this.dataGenerator = dataGenerator;
    this.testRunner = testRunner;
  }

  async runAllScenarios(): Promise<void> {
    console.log("üìã Executando cen√°rios de Suplementar...");

    await this.scenarioSuplementarBasica();
    await this.scenarioSuplementarCompleta();
    await this.scenarioSuplementarEmergencia();
    await this.scenarioSuplementarRecemNascido();
    await this.scenarioSuplementarReinternacao();
    await this.scenarioSuplementarRecaida();
    await this.scenarioSuplementarParticular();
    await this.scenarioSuplementarVulnerabilidade();
  }

  async scenarioSuplementarBasica(): Promise<void> {
    console.log("  üìã Cen√°rio: Suplementar B√°sica");

    const testData = this.dataGenerator.generateSuplementarData();
    testData.nome = "Suplementar B√°sica";
    testData.descricao = "Suplementar com dados m√≠nimos obrigat√≥rios";

    // Remove campos opcionais para testar apenas obrigat√≥rios
    testData.dados.DT_PRORROGACAO = null;
    testData.dados.MOTIVO_PRORROGACAO = null;
    testData.dados.OBSERVACOES = null;
    testData.dados.CID_SECUNDARIO = null;

    await this.testRunner.runTest(testData);
  }

  async scenarioSuplementarCompleta(): Promise<void> {
    console.log("  üìã Cen√°rio: Suplementar Completa");

    const testData = this.dataGenerator.generateSuplementarData();
    testData.nome = "Suplementar Completa";
    testData.descricao =
      "Suplementar com todos os campos obrigat√≥rios e opcionais";

    // Adiciona campos opcionais
    testData.dados.DT_PRORROGACAO = new Date(
      Date.now() - 3 * 24 * 60 * 60 * 1000
    )
      .toISOString()
      .split("T")[0];
    testData.dados.MOTIVO_PRORROGACAO = "Prorroga√ß√£o anterior para tratamento";
    testData.dados.OBSERVACOES = "Paciente com alta m√©dica bem-sucedida";
    testData.dados.CID_PRINCIPAL = "A00.0";
    testData.dados.CID_SECUNDARIO = "B00.0";
    testData.dados.RESUMO_ALTA = "Paciente recebeu alta em bom estado geral";

    await this.testRunner.runTest(testData);
  }

  async scenarioSuplementarEmergencia(): Promise<void> {
    console.log("  üìã Cen√°rio: Suplementar Emerg√™ncia");

    const testData = this.dataGenerator.generateSuplementarData();
    testData.nome = "Suplementar Emerg√™ncia";
    testData.descricao = "Suplementar de interna√ß√£o de emerg√™ncia";

    // Dados espec√≠ficos para emerg√™ncia
    testData.dados.TIPO_ATENDIMENTO = "EMERGENCIA";
    testData.dados.PRIORIDADE = "ALTA";
    testData.dados.MOTIVO_ALTA = "Alta m√©dica ap√≥s tratamento de emerg√™ncia";
    testData.dados.OBSERVACOES = "Paciente estabilizado ap√≥s emerg√™ncia";
    testData.dados.CID_PRINCIPAL = "S72.0"; // Fratura do f√™mur
    testData.dados.RESUMO_ALTA = "Fratura tratada com sucesso";

    await this.testRunner.runTest(testData);
  }

  async scenarioSuplementarRecemNascido(): Promise<void> {
    console.log("  üìã Cen√°rio: Suplementar Rec√©m-nascido");

    const testData = this.dataGenerator.generateSuplementarData();
    testData.nome = "Suplementar Rec√©m-nascido";
    testData.descricao = "Suplementar de interna√ß√£o de rec√©m-nascido";

    // Dados espec√≠ficos para rec√©m-nascido
    testData.dados.TIPO_PACIENTE = "RECEM_NASCIDO";
    testData.dados.IDADE_PACIENTE = "0";
    testData.dados.PESO_NASCIMENTO = "3200";
    testData.dados.ALTURA_NASCIMENTO = "50";
    testData.dados.APGAR_1MIN = "8";
    testData.dados.APGAR_5MIN = "9";
    testData.dados.MOTIVO_ALTA = "Alta m√©dica do rec√©m-nascido";
    testData.dados.OBSERVACOES = "Rec√©m-nascido com alta em bom estado";
    testData.dados.CID_PRINCIPAL = "P07.0"; // Rec√©m-nascido de baixo peso
    testData.dados.RESUMO_ALTA = "Rec√©m-nascido ganhou peso adequadamente";

    await this.testRunner.runTest(testData);
  }

  async scenarioSuplementarReinternacao(): Promise<void> {
    console.log("  üìã Cen√°rio: Suplementar Reinterna√ß√£o");

    const testData = this.dataGenerator.generateSuplementarData();
    testData.nome = "Suplementar Reinterna√ß√£o";
    testData.descricao = "Suplementar de reinterna√ß√£o de paciente";

    // Dados espec√≠ficos para reinterna√ß√£o
    testData.dados.TIPO_INTERNACAO = "REINTERNACAO";
    testData.dados.INTERNACAO_ANTERIOR = "1234567890";
    testData.dados.DT_ALTA_ANTERIOR = new Date(
      Date.now() - 30 * 24 * 60 * 60 * 1000
    )
      .toISOString()
      .split("T")[0];
    testData.dados.MOTIVO_ALTA = "Alta m√©dica ap√≥s reinterna√ß√£o";
    testData.dados.OBSERVACOES = "Paciente reinternado com alta bem-sucedida";
    testData.dados.RESUMO_ALTA = "Reinterna√ß√£o tratada com sucesso";

    await this.testRunner.runTest(testData);
  }

  async scenarioSuplementarRecaida(): Promise<void> {
    console.log("  üìã Cen√°rio: Suplementar Reca√≠da");

    const testData = this.dataGenerator.generateSuplementarData();
    testData.nome = "Suplementar Reca√≠da";
    testData.descricao = "Suplementar de interna√ß√£o por reca√≠da";

    // Dados espec√≠ficos para reca√≠da
    testData.dados.TIPO_INTERNACAO = "RECAIDA";
    testData.dados.CONDICAO_CRONICA = "DIABETES";
    testData.dados.MOTIVO_ALTA = "Alta m√©dica ap√≥s controle da reca√≠da";
    testData.dados.OBSERVACOES = "Paciente com diabetes controlado";
    testData.dados.CID_PRINCIPAL = "E11.9"; // Diabetes tipo 2
    testData.dados.RESUMO_ALTA = "Diabetes controlado, paciente est√°vel";

    await this.testRunner.runTest(testData);
  }

  async scenarioSuplementarParticular(): Promise<void> {
    console.log("  üìã Cen√°rio: Suplementar Particular");

    const testData = this.dataGenerator.generateSuplementarData();
    testData.nome = "Suplementar Particular";
    testData.descricao = "Suplementar de paciente particular";

    // Dados espec√≠ficos para paciente particular
    testData.dados.TIPO_PAGAMENTO = "PARTICULAR";
    testData.dados.CODIGO_OPERADORA = null;
    testData.dados.NUMERO_CARTEIRA = null;
    testData.dados.VALIDADE_CARTEIRA = null;
    testData.dados.MOTIVO_ALTA = "Alta m√©dica de paciente particular";
    testData.dados.OBSERVACOES = "Paciente particular com alta bem-sucedida";
    testData.dados.RESUMO_ALTA = "Tratamento particular conclu√≠do com sucesso";

    await this.testRunner.runTest(testData);
  }

  async scenarioSuplementarVulnerabilidade(): Promise<void> {
    console.log("  üìã Cen√°rio: Suplementar Vulnerabilidade");

    const testData = this.dataGenerator.generateSuplementarData();
    testData.nome = "Suplementar Vulnerabilidade";
    testData.descricao = "Suplementar de paciente em vulnerabilidade";

    // Dados espec√≠ficos para vulnerabilidade
    testData.dados.SITUACAO_VULNERABILIDADE = "SIM";
    testData.dados.TIPO_VULNERABILIDADE = "SOCIAL";
    testData.dados.MOTIVO_ALTA = "Alta m√©dica com suporte social";
    testData.dados.OBSERVACOES =
      "Paciente em vulnerabilidade com alta bem-sucedida";
    testData.dados.ACOMPANHANTE = "SIM";
    testData.dados.NOME_ACOMPANHANTE = "Jo√£o Silva";
    testData.dados.RESUMO_ALTA = "Alta com suporte social adequado";

    await this.testRunner.runTest(testData);
  }

  async runScenario(scenarioNumber: number): Promise<void> {
    const scenarios = [
      this.scenarioSuplementarBasica,
      this.scenarioSuplementarCompleta,
      this.scenarioSuplementarEmergencia,
      this.scenarioSuplementarRecemNascido,
      this.scenarioSuplementarReinternacao,
      this.scenarioSuplementarRecaida,
      this.scenarioSuplementarParticular,
      this.scenarioSuplementarVulnerabilidade,
    ];

    if (scenarioNumber < 1 || scenarioNumber > scenarios.length) {
      throw new Error(
        `Cen√°rio inv√°lido. Escolha entre 1 e ${scenarios.length}`
      );
    }

    await scenarios[scenarioNumber - 1].call(this);
  }

  getScenariosDescription(): string[] {
    return [
      "1. Suplementar B√°sica - Dados m√≠nimos obrigat√≥rios",
      "2. Suplementar Completa - Todos os campos obrigat√≥rios e opcionais",
      "3. Suplementar Emerg√™ncia - Suplementar de emerg√™ncia",
      "4. Suplementar Rec√©m-nascido - Suplementar de rec√©m-nascido",
      "5. Suplementar Reinterna√ß√£o - Suplementar de reinterna√ß√£o",
      "6. Suplementar Reca√≠da - Suplementar por reca√≠da",
      "7. Suplementar Particular - Suplementar de paciente particular",
      "8. Suplementar Vulnerabilidade - Suplementar de paciente vulner√°vel",
    ];
  }
}

